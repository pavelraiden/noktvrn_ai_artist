import React, { useState, useRef, useEffect } from 'react';

interface AudioPlayerState {
  isPlaying: boolean;
  duration: number;
  currentTime: number;
  volume: number;
}

/**
 * Spotify-inspired audio player component for the bottom of the app
 */
const SpotifyPlayer: React.FC = () => {
  // Mock current track data
  const currentTrack = {
    title: "Synthetic Dreams",
    artist: "NeuralBeats",
    album: "Digital Horizon",
    coverUrl: "https://via.placeholder.com/56",
    audioUrl: "https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3", // Example audio
  };

  // Audio player state
  const [playerState, setPlayerState] = useState<AudioPlayerState>({
    isPlaying: false,
    duration: 0,
    currentTime: 0,
    volume: 0.7,
  });

  // Audio element reference
  const audioRef = useRef<HTMLAudioElement>(null);

  // Set up audio events
  useEffect(() => {
    const audio = audioRef.current;
    if (!audio) return;

    const setAudioData = () => {
      setPlayerState(prev => ({
        ...prev,
        duration: audio.duration,
      }));
    };

    const setAudioTime = () => {
      setPlayerState(prev => ({
        ...prev,
        currentTime: audio.currentTime,
      }));
    };

    // Event listeners
    audio.addEventListener('loadedmetadata', setAudioData);
    audio.addEventListener('timeupdate', setAudioTime);
    
    // Set initial volume
    audio.volume = playerState.volume;

    return () => {
      audio.removeEventListener('loadedmetadata', setAudioData);
      audio.removeEventListener('timeupdate', setAudioTime);
    };
  }, []);

  // Play/pause toggle
  const togglePlay = () => {
    const audio = audioRef.current;
    if (!audio) return;

    if (playerState.isPlaying) {
      audio.pause();
    } else {
      audio.play();
    }

    setPlayerState(prev => ({
      ...prev,
      isPlaying: !prev.isPlaying,
    }));
  };

  // Seek control
  const handleSeek = (e: React.ChangeEvent<HTMLInputElement>) => {
    const audio = audioRef.current;
    if (!audio) return;

    const newTime = parseFloat(e.target.value);
    audio.currentTime = newTime;
    
    setPlayerState(prev => ({
      ...prev,
      currentTime: newTime,
    }));
  };

  // Volume control
  const handleVolumeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const audio = audioRef.current;
    if (!audio) return;

    const newVolume = parseFloat(e.target.value);
    audio.volume = newVolume;
    
    setPlayerState(prev => ({
      ...prev,
      volume: newVolume,
    }));
  };

  // Format time in MM:SS
  const formatTime = (time: number) => {
    if (isNaN(time)) return "0:00";
    
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };

  return (
    <div className="h-20 bg-background-elevated border-t border-background-highlight px-4 flex items-center">
      <audio ref={audioRef} src={currentTrack.audioUrl} />
      
      {/* Track Info */}
      <div className="w-1/4 flex items-center gap-3">
        <img 
          src={currentTrack.coverUrl} 
          alt={`${currentTrack.title} cover`} 
          className="w-14 h-14 rounded"
        />
        <div className="overflow-hidden">
          <p className="text-sm font-medium truncate">{currentTrack.title}</p>
          <p className="text-xs text-text-subdued truncate">{currentTrack.artist}</p>
        </div>
        <button className="text-text-subdued hover:text-white">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z" />
          </svg>
        </button>
      </div>
      
      {/* Player Controls */}
      <div className="flex-1 flex flex-col items-center">
        <div className="flex items-center gap-4 mb-2">
          <button className="text-text-subdued hover:text-white">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <polygon points="19 20 9 12 19 4 19 20" />
              <line x1="5" y1="19" x2="5" y2="5" />
            </svg>
          </button>
          
          <button 
            onClick={togglePlay}
            className="bg-white rounded-full w-8 h-8 flex items-center justify-center hover:scale-105 transition-transform"
          >
            {playerState.isPlaying ? (
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="currentColor" stroke="none">
                <rect x="6" y="4" width="4" height="16" />
                <rect x="14" y="4" width="4" height="16" />
              </svg>
            ) : (
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="currentColor" stroke="none">
                <polygon points="5 3 19 12 5 21 5 3" />
              </svg>
            )}
          </button>
          
          <button className="text-text-subdued hover:text-white">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <polygon points="5 4 15 12 5 20 5 4" />
              <line x1="19" y1="5" x2="19" y2="19" />
            </svg>
          </button>
        </div>
        
        <div className="w-full flex items-center gap-2">
          <span className="text-xs text-text-subdued w-10 text-right">
            {formatTime(playerState.currentTime)}
          </span>
          
          <div className="flex-1 relative group">
            <input
              type="range"
              min={0}
              max={playerState.duration || 0}
              value={playerState.currentTime}
              onChange={handleSeek}
              className="w-full h-1 bg-background-highlight appearance-none rounded cursor-pointer [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:w-3 [&::-webkit-slider-thumb]:h-3 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-white [&::-webkit-slider-thumb]:opacity-0 group-hover:[&::-webkit-slider-thumb]:opacity-100"
              style={{
                background: `linear-gradient(to right, #1DB954 ${(playerState.currentTime / (playerState.duration || 1)) * 100}%, #5e5e5e ${(playerState.currentTime / (playerState.duration || 1)) * 100}%)`,
              }}
            />
          </div>
          
          <span className="text-xs text-text-subdued w-10">
            {formatTime(playerState.duration)}
          </span>
        </div>
      </div>
      
      {/* Volume Controls */}
      <div className="w-1/4 flex items-center justify-end gap-3">
        <button className="text-text-subdued hover:text-white">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5" />
            <path d="M15.54 8.46a5 5 0 0 1 0 7.07" />
            <path d="M19.07 4.93a10 10 0 0 1 0 14.14" />
          </svg>
        </button>
        
        <div className="w-24 group">
          <input
            type="range"
            min={0}
            max={1}
            step={0.01}
            value={playerState.volume}
            onChange={handleVolumeChange}
            className="w-full h-1 bg-background-highlight appearance-none rounded cursor-pointer [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:w-3 [&::-webkit-slider-thumb]:h-3 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-white [&::-webkit-slider-thumb]:opacity-0 group-hover:[&::-webkit-slider-thumb]:opacity-100"
            style={{
              background: `linear-gradient(to right, #1DB954 ${playerState.volume * 100}%, #5e5e5e ${playerState.volume * 100}%)`,
            }}
          />
        </div>

        <button className="text-text-subdued hover:text-white">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <path d="M3 15h18v-2H3m0 8h18v-2H3m0-8h18V3H3z" />
          </svg>
        </button>
      </div>
    </div>
  );
};

export default SpotifyPlayer;