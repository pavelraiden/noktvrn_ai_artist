import React, { useState, useCallback, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { fetchArtistById, fetchArtistLogs, generateArtistContent } from '../services/api';
import { formatDate, formatNumber } from '../utils/formatters';
import { Tabs, TabList, TabTrigger, TabContent } from '../components/ui/Tab';
import Button from '../components/ui/Button';
import { ChatWindow } from '../components/chat';
import { useArtistStore } from '../store/artistStore';
import { useToast } from '../components/ui/Toast';
import LoadingSpinner from '../components/ui/LoadingSpinner';
import { Artist, ArtistRelease } from '../types';

/**
 * Spotify-styled artist detail page component
 * Features header with artist image, main stats, and tabbed interface
 */
const SpotifyArtistDetail: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const queryClient = useQueryClient();
  const [activeTab, setActiveTab] = useState('overview');
  const { addToRecentlyViewed } = useArtistStore();
  const { addToast } = useToast();
  
  // Generate form state
  const [generateForm, setGenerateForm] = useState({
    genre: 'electronic',
    style: 'ambient',
    length: 'medium',
  });

  // Fetch artist data
  const { 
    data: artist, 
    isLoading: isLoadingArtist, 
    error: artistError 
  } = useQuery({
    queryKey: ['artist', id],
    queryFn: () => fetchArtistById(id as string),
    enabled: !!id,
    onSuccess: (data) => {
      addToRecentlyViewed(data);
      document.title = `${data.name} | AI Artist Platform`;
    },
  });

  // Fetch artist logs
  const {
    data: logs,
    isLoading: isLoadingLogs,
    error: logsError,
  } = useQuery({
    queryKey: ['artistLogs', id],
    queryFn: () => fetchArtistLogs(id as string),
    enabled: !!id && activeTab === 'logs',
  });

  // Mutation for content generation
  const generateMutation = useMutation({
    mutationFn: (data: any) => generateArtistContent(id as string, data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['artist', id] });
      queryClient.invalidateQueries({ queryKey: ['artistLogs', id] });
      addToast('success', 'Content successfully generated!');
    },
    onError: () => {
      addToast('error', 'Failed to generate content. Please try again.');
    }
  });

  // Tab change handler
  const handleTabChange = useCallback((tab: string) => {
    setActiveTab(tab);
    
    // Pre-fetch logs data when switching to logs tab
    if (tab === 'logs' && id) {
      queryClient.prefetchQuery({
        queryKey: ['artistLogs', id],
        queryFn: () => fetchArtistLogs(id),
      });
    }
  }, [id, queryClient]);

  // Form submission handler
  const handleGenerateSubmit = useCallback((e: React.FormEvent) => {
    e.preventDefault();
    generateMutation.mutate(generateForm);
  }, [generateForm, generateMutation]);

  // Form change handler
  const handleFormChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    const { name, value } = e.target;
    setGenerateForm((prev) => ({ ...prev, [name]: value }));
  }, []);

  // Navigate back to artists list
  const handleBackClick = useCallback(() => {
    navigate('/artists');
  }, [navigate]);

  if (isLoadingArtist) {
    return (
      <div className="flex justify-center items-center h-full">
        <LoadingSpinner size="lg" label="Loading artist..." />
      </div>
    );
  }

  if (artistError) {
    return (
      <div className="bg-background-elevated p-6 rounded-spotify">
        <h3 className="text-xl font-bold mb-4 text-essential-negative">Error Loading Artist</h3>
        <p className="text-text-subdued mb-6">Unable to load artist data. Please try again later.</p>
        <Button 
          onClick={handleBackClick} 
          className="bg-spotify-green hover:bg-spotify-brightgreen text-black font-bold py-2 px-4 rounded-pill"
        >
          Back to Artists
        </Button>
      </div>
    );
  }

  // Ensure artist is defined to avoid null checks throughout the component
  if (!artist) return null;

  return (
    <div className="animate-fade-in">
      {/* Artist header with background gradient and info */}
      <div 
        className="flex flex-col -mx-8 -mt-8 mb-8 px-8 pt-40 pb-8 relative bg-gradient-to-b from-spotify-purple/30 to-background-base"
        style={{
          backgroundImage: artist.avatarUrl 
            ? `linear-gradient(rgba(0,0,0,0.6), var(--tw-gradient-to)), url(${artist.avatarUrl})`
            : undefined,
          backgroundSize: 'cover',
          backgroundPosition: 'center',
        }}
      >
        {/* Back button */}
        <button 
          onClick={handleBackClick}
          className="absolute top-8 left-8 w-8 h-8 flex items-center justify-center rounded-full bg-background-press/80 backdrop-blur-sm text-white"
          aria-label="Go back"
        >
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <path d="M15 18l-6-6 6-6" />
          </svg>
        </button>

        <div className="flex items-end gap-6">
          {/* Artist image */}
          <div className="w-48 h-48 shadow-spotify rounded-spotify bg-background-elevated overflow-hidden">
            <img 
              src={artist.avatarUrl || `https://via.placeholder.com/300/1DB954/ffffff?text=${encodeURIComponent(artist.name.charAt(0))}`}
              alt={artist.name}
              className="w-full h-full object-cover"
            />
          </div>
          
          {/* Artist info */}
          <div className="flex-1">
            <div className="flex items-center gap-2 mb-2">
              <span className={`px-2 py-0.5 text-xs font-bold rounded-pill ${
                artist.status === 'active' ? 'bg-spotify-green text-black' :
                artist.status === 'paused' ? 'bg-spotify-blue text-white' :
                artist.status === 'error' ? 'bg-essential-negative text-white' :
                'bg-text-subdued text-black'
              }`}>
                {artist.status.toUpperCase()}
              </span>
              <span className="text-text-subdued text-sm font-medium">{artist.genre}</span>
            </div>
            <h1 className="text-5xl font-bold mb-2">{artist.name}</h1>
            <div className="text-text-subdued text-sm">
              <span className="mr-2">{formatNumber(artist.playCount)} plays</span>•
              <span className="mx-2">{artist.releaseCount} releases</span>•
              <span className="ml-2">Created {formatDate(artist.createdAt)}</span>
            </div>
          </div>
        </div>
      </div>

      {/* Artist actions */}
      <div className="flex items-center gap-4 mb-8">
        <button 
          className="flex items-center justify-center gap-2 bg-spotify-green hover:bg-spotify-brightgreen text-black font-bold py-3 px-6 rounded-pill transition-colors"
          onClick={() => handleTabChange('generate')}
        >
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <polygon points="5 3 19 12 5 21 5 3" />
          </svg>
          <span>Generate New</span>
        </button>
        
        <button className="w-10 h-10 rounded-full border border-text-subdued flex items-center justify-center text-text-subdued hover:text-white hover:border-white transition-colors">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z" />
          </svg>
        </button>
        
        <button className="w-10 h-10 rounded-full border border-text-subdued flex items-center justify-center text-text-subdued hover:text-white hover:border-white transition-colors">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <circle cx="12" cy="12" r="1" />
            <circle cx="19" cy="12" r="1" />
            <circle cx="5" cy="12" r="1" />
          </svg>
        </button>
      </div>

      {/* Tabs interface */}
      <div className="bg-background-elevated rounded-spotify overflow-hidden">
        <TabList className="px-6 pt-4">
          <TabTrigger
            isActive={activeTab === 'overview'}
            onClick={() => handleTabChange('overview')}
            className="text-sm uppercase font-bold tracking-wide px-4 py-2"
          >
            Overview
          </TabTrigger>
          <TabTrigger
            isActive={activeTab === 'generate'}
            onClick={() => handleTabChange('generate')}
            className="text-sm uppercase font-bold tracking-wide px-4 py-2"
          >
            Generate
          </TabTrigger>
          <TabTrigger
            isActive={activeTab === 'logs'}
            onClick={() => handleTabChange('logs')}
            className="text-sm uppercase font-bold tracking-wide px-4 py-2"
          >
            Logs
          </TabTrigger>
          <TabTrigger
            isActive={activeTab === 'chat'}
            onClick={() => handleTabChange('chat')}
            className="text-sm uppercase font-bold tracking-wide px-4 py-2"
          >
            Chat
          </TabTrigger>
        </TabList>

        <div className="p-6">
          {/* Overview tab */}
          <TabContent isActive={activeTab === 'overview'}>
            <div className="space-y-8">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <MetricCard
                  title="eCPA"
                  value={`$${artist.metrics?.ecpa.toFixed(2) || '0.00'}`}
                  change={+0.05}
                />
                
                <MetricCard
                  title="eCPT"
                  value={`$${artist.metrics?.ecpt.toFixed(2) || '0.00'}`}
                  change={-0.12}
                />
                
                <MetricCard
                  title="Plays"
                  value={formatNumber(artist.metrics?.plays || 0)}
                  change={+12.5}
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="bg-background-highlight p-4 rounded-spotify">
                  <h3 className="text-lg font-bold mb-4">Recent Releases</h3>
                  <div className="space-y-2 max-h-80 overflow-y-auto pr-2">
                    {artist.releases?.slice(0, 10).map((release) => (
                      <ReleaseItem key={release.id} release={release} />
                    ))}
                    {(!artist.releases || artist.releases.length === 0) && (
                      <p className="text-text-subdued text-center py-6">No releases yet</p>
                    )}
                  </div>
                </div>

                <div className="bg-background-highlight p-4 rounded-spotify">
                  <h3 className="text-lg font-bold mb-4">Performance</h3>
                  <div className="space-y-6">
                    <ProgressBar 
                      label="Conversion"
                      value={artist.metrics?.conversionRate || 0}
                      color="bg-spotify-green"
                    />
                    
                    <ProgressBar 
                      label="Retention"
                      value={artist.metrics?.retentionRate || 0}
                      color="bg-spotify-blue"
                    />
                    
                    <ProgressBar 
                      label="Completion"
                      value={artist.metrics?.completionRate || 0}
                      color="bg-spotify-purple"
                    />
                  </div>
                </div>
              </div>
            </div>
          </TabContent>

          {/* Generate tab */}
          <TabContent isActive={activeTab === 'generate'}>
            <form onSubmit={handleGenerateSubmit} className="max-w-lg mx-auto space-y-6 bg-background-highlight p-6 rounded-spotify">
              <h2 className="text-xl font-bold mb-6">Generate New Content</h2>
              
              <div>
                <label htmlFor="genre" className="block text-sm font-medium text-text-subdued mb-2">
                  Genre
                </label>
                <select
                  id="genre"
                  name="genre"
                  className="w-full px-3 py-2 rounded-md bg-background-elevated border border-background-press text-white focus:ring-2 focus:ring-spotify-green focus:border-transparent"
                  value={generateForm.genre}
                  onChange={handleFormChange}
                >
                  <option value="electronic">Electronic</option>
                  <option value="pop">Pop</option>
                  <option value="rock">Rock</option>
                  <option value="hip-hop">Hip Hop</option>
                  <option value="ambient">Ambient</option>
                </select>
              </div>

              <div>
                <label htmlFor="style" className="block text-sm font-medium text-text-subdued mb-2">
                  Style
                </label>
                <select
                  id="style"
                  name="style"
                  className="w-full px-3 py-2 rounded-md bg-background-elevated border border-background-press text-white focus:ring-2 focus:ring-spotify-green focus:border-transparent"
                  value={generateForm.style}
                  onChange={handleFormChange}
                >
                  <option value="ambient">Ambient</option>
                  <option value="dance">Dance</option>
                  <option value="aggressive">Aggressive</option>
                  <option value="melodic">Melodic</option>
                  <option value="experimental">Experimental</option>
                </select>
              </div>

              <div>
                <label htmlFor="length" className="block text-sm font-medium text-text-subdued mb-2">
                  Length
                </label>
                <select
                  id="length"
                  name="length"