import React, { useState, Suspense, useCallback, memo } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { fetchArtistById, fetchArtistLogs, generateArtistContent } from '../services/api';
import { Card, CardHeader, CardTitle, CardContent } from '../components/ui/Card';
import { Tabs, TabList, TabTrigger, TabContent } from '../components/ui/Tab';
import Button from '../components/ui/Button';
import { ChatWindow } from '../components/chat';
import { useArtistStore } from '../store/artistStore';
import { formatDate, formatNumber } from '../utils/formatters';
import { useAccessibility } from '../hooks/useAccessibility';
import { useToast } from '../components/ui/Toast';
import LoadingSpinner from '../components/ui/LoadingSpinner';
import { Artist, ArtistRelease } from '../types';

/**
 * ArtistDetail page component
 * @returns ArtistDetail page with tabs for different sections
 */
const ArtistDetail: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const queryClient = useQueryClient();
  const [activeTab, setActiveTab] = useState('overview');
  const { addToRecentlyViewed } = useArtistStore();
  const { focusVisible, createKeyboardNavigationHandler } = useAccessibility();
  const { addToast } = useToast();
  
  // Generate form state
  const [generateForm, setGenerateForm] = useState({
    genre: 'electronic',
    style: 'ambient',
    length: 'medium',
  });

  // Fetch artist data
  const { 
    data: artist, 
    isLoading: isLoadingArtist, 
    error: artistError 
  } = useQuery({
    queryKey: ['artist', id],
    queryFn: () => fetchArtistById(id as string),
    enabled: !!id,
    onSuccess: (data) => {
      addToRecentlyViewed(data);
      document.title = `${data.name} | AI Artist Platform`;
    },
  });

  // Fetch artist logs
  const {
    data: logs,
    isLoading: isLoadingLogs,
    error: logsError,
  } = useQuery({
    queryKey: ['artistLogs', id],
    queryFn: () => fetchArtistLogs(id as string),
    enabled: !!id && activeTab === 'logs',
  });

  // Mutation for content generation
  const generateMutation = useMutation({
    mutationFn: (data: any) => generateArtistContent(id as string, data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['artist', id] });
      queryClient.invalidateQueries({ queryKey: ['artistLogs', id] });
      addToast('success', 'Content successfully generated!');
    },
    onError: () => {
      addToast('error', 'Failed to generate content. Please try again.');
    }
  });

  // Tab change handler
  const handleTabChange = useCallback((tab: string) => {
    setActiveTab(tab);
    
    // Pre-fetch logs data when switching to logs tab
    if (tab === 'logs' && id) {
      queryClient.prefetchQuery({
        queryKey: ['artistLogs', id],
        queryFn: () => fetchArtistLogs(id),
      });
    }
  }, [id, queryClient]);

  // Form submission handler
  const handleGenerateSubmit = useCallback((e: React.FormEvent) => {
    e.preventDefault();
    generateMutation.mutate(generateForm);
  }, [generateForm, generateMutation]);

  // Form change handler
  const handleFormChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    const { name, value } = e.target;
    setGenerateForm((prev) => ({ ...prev, [name]: value }));
  }, []);

  // Navigate back to artists list
  const handleBackClick = useCallback(() => {
    navigate('/artists');
  }, [navigate]);

  // Keyboard navigation for tabs
  const tabKeyHandler = createKeyboardNavigationHandler({
    onLeft: () => {
      const tabs = ['overview', 'generate', 'logs', 'chat'];
      const currentIndex = tabs.indexOf(activeTab);
      const prevIndex = (currentIndex - 1 + tabs.length) % tabs.length;
      handleTabChange(tabs[prevIndex]);
    },
    onRight: () => {
      const tabs = ['overview', 'generate', 'logs', 'chat'];
      const currentIndex = tabs.indexOf(activeTab);
      const nextIndex = (currentIndex + 1) % tabs.length;
      handleTabChange(tabs[nextIndex]);
    },
  });

  if (isLoadingArtist) {
    return (
      <div className="flex justify-center items-center h-full">
        <LoadingSpinner size="lg" label="Loading artist data..." />
      </div>
    );
  }

  if (artistError) {
    return (
      <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 text-red-700 dark:text-red-400 p-4 rounded-lg">
        <h3 className="text-lg font-medium mb-2">Error Loading Artist</h3>
        <p>Unable to load artist data. Please try again later.</p>
        <Button 
          variant="outline" 
          onClick={handleBackClick} 
          className="mt-4"
        >
          Back to Artists
        </Button>
      </div>
    );
  }

  return (
    <div className="space-y-6 animate-fade-in">
      {/* Artist header */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden">
        <div className="relative h-40 bg-gradient-to-r from-primary-600 to-secondary-600 dark:from-primary-800 dark:to-secondary-800">
          <div className="absolute bottom-0 left-0 right-0 p-6 